{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","markdown","this","setState","inputStyle","width","height","marginLeft","marginRight","padding","borderRadius","boxShadow","className","Badge","variant","target","rel","href","style","value","onChange","e","updateMarkdown","backgroundColor","overflow","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAEMA,EAASC,EAAQ,IAGFC,E,kDACrB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAS,geAHK,E,2DAoCHA,GACbC,KAAKC,SAAS,CAAEF,e,+BAGT,IAAD,OAEFG,EAAa,CACfC,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAQ,OACRC,aAAa,kBACbC,UAAW,OAcb,OACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,aAEd,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACA,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,SAA7C,uBAIA,sDAA2B,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,0DAAlD,sBAA3B,OAIJ,yBAAKL,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,oBAKJ,yBAAKF,UAAU,aAAaM,MAAOd,GACjC,8BACAQ,UAAU,QACVM,MAAOd,EACPe,MAAOjB,KAAKF,MAAMC,SAClBmB,SAAU,SAACC,GACT,EAAKC,eAAeD,EAAEN,OAAOI,YAOnC,yBAAKP,UAAU,YACX,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,aAMJ,yBAAKI,MAAOd,GAEZ,yBACEc,MA5DI,CAChBb,MAAO,QACPC,OAAQ,OACRiB,gBAAiB,UACjBhB,WAAY,OACZC,YAAa,OACbC,QAAQ,OACRe,SAAU,OACVd,aAAa,kBACbC,UAAW,OAoDCc,wBAAyB,CACvBC,OAAQ9B,EAAOM,KAAKF,MAAMC,sB,GAnHX0B,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb832dba.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nconst marked = require(\"marked\");\n\n\nexport default class App extends React.Component{\nconstructor(props){\n  super(props)\n  this.state = {\n    markdown: `# Headings \n# h1\n## h2\n### h3 \n<br> **bold text** and *italicized text*. \n> This is a blockquote\n---\n<br>\n\n1. First item \n2. Second item \n3. Third item <br>\n\n[There is a link to my Github](https://github.com/Esemega/)\n\n| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n\n<br>\n\n~~The world is flat.~~\n\n<br>\n\n### TODO\n- [x] Visit my Github page\n- [ ] Share this proyect with your friends\n- [ ] Contact me `,\n  };\n}\n\nupdateMarkdown(markdown) {\n  this.setState({ markdown });\n}\n\nrender(){\n\n  var inputStyle = {\n    width: \"550px\",\n    height: \"70vh\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding:\"10px\",\n    borderRadius:\"2px 2px 4px 4px\",\n    boxShadow: \"1px\"\n  };\n\n  var outputStyle = {\n    width: \"550px\",\n    height: \"70vh\",\n    backgroundColor: \"#f1f1f1\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding:\"10px\",\n    overflow: \"auto\",\n    borderRadius:\"2px 2px 4px 4px\",\n    boxShadow: \"1px\"\n  };\n  return (\n    <div className=\"App\">\n      <main className=\"container\">\n        \n        <div className=\"row mt-4\">\n          <div className=\"col text-center\">\n            <h1>\n            <Badge className=\"text-align-center\" variant=\"light\">\n                Markdown Previewer\n            </Badge>\n            </h1>\n            <p>Read this Github guide: <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://guides.github.com/features/mastering-markdown/\">Mastering Markdown</a>.</p>\n          </div>\n        </div>\n\n        <div className=\"row mt-4\">\n          <div className=\"col-md-6\">\n            <div className=\"col text-center\">\n              <h4>\n                <Badge className=\"text-align-center\" variant=\"secondary\">\n                  Markdown Input\n                </Badge>\n              </h4>\n            </div>\n            <div className=\"mark-input\" style={inputStyle}>\n              <textarea \n              className=\"input\"\n              style={inputStyle}\n              value={this.state.markdown}\n              onChange={(e) => {\n                this.updateMarkdown(e.target.value);\n              }}\n              >\n              </textarea>\n            </div>\n          </div>\n\n          <div className=\"col-md-6\">\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\n                    Preview\n                  </Badge>\n                </h4>\n              </div>\n              \n              <div style={inputStyle}>\n                \n              <div\n                style={outputStyle}\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown),\n                }}\n              ></div>\n              \n              </div>\n            </div>\n          </div>\n          \n        </main>\n    </div>\n  );}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}